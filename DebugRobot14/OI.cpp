/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/closeValve1.h"
#include "Commands/closeValve2.h"
#include "Commands/compressArm.h"
#include "Commands/compressShifter.h"
#include "Commands/drive.h"
#include "Commands/driveArcarde.h"
#include "Commands/openValve1.h"
#include "Commands/openValve2.h"
#include "Commands/sendData.h"
#include "Commands/switchToArcadeDrive.h"
#include "Commands/switchToMecanumDrive.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	joystick1 = new SmartJoystick(1);
	
	arcadeDrive = new JoystickButton(joystick1, 1);
	arcadeDrive->WhenPressed(new switchToArcadeDrive());
	mecanumdrive = new JoystickButton(joystick1, 1);
	mecanumdrive->WhenPressed(new switchToMecanumDrive());
	compressShifterButton = new JoystickButton(joystick1, 1);
	compressShifterButton->WhileHeld(new compressShifter());
	compressArmButton = new JoystickButton(joystick1, 1);
	compressArmButton->WhileHeld(new compressArm());
	openValve2Button = new JoystickButton(joystick1, 7);
	openValve2Button->WhenPressed(new openValve2());
	closeValve2Button = new JoystickButton(joystick1, 6);
	closeValve2Button->WhenPressed(new closeValve2());
	closeValve1Button = new JoystickButton(joystick1, 5);
	closeValve1Button->WhenPressed(new closeValve1());
	openValve1Button = new JoystickButton(joystick1, 4);
	openValve1Button->WhenPressed(new openValve1());
	sendDataButton = new JoystickButton(joystick1, 3);
	sendDataButton->WhenPressed(new sendData());
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
	SmartDashboard::PutData("sendData", new sendData());
	SmartDashboard::PutData("compressArm", new compressArm());
	SmartDashboard::PutData("openValve1", new openValve1());
	SmartDashboard::PutData("closeValve1", new closeValve1());
	SmartDashboard::PutData("openValve2", new openValve2());
	SmartDashboard::PutData("closeValve2", new closeValve2());
	SmartDashboard::PutData("drive", new drive());
	SmartDashboard::PutData("compressShifter", new compressShifter());
	SmartDashboard::PutData("switchToArcadeDrive", new switchToArcadeDrive());
	SmartDashboard::PutData("switchToMecanumDrive", new switchToMecanumDrive());
	SmartDashboard::PutData("driveArcarde", new driveArcarde());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
SmartJoystick* OI::getJoystick1() {
	return joystick1;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
