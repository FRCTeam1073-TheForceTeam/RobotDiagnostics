/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/angleDown.h"
#include "Commands/angleUp.h"
#include "Commands/collectFaster.h"
#include "Commands/collectSlower.h"
#include "Commands/compress.h"
#include "Commands/drive.h"
#include "Commands/driveArcarde.h"
#include "Commands/launch.h"
#include "Commands/shift.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	throttle = new SmartJoystick(3);
	
	operatorStick = new SmartJoystick(2);
	
	driveStick = new SmartJoystick(1);
	
	arcadeDriveButton = new JoystickButton(driveStick, 5);
	arcadeDriveButton->WhenPressed(new driveArcarde());
	collectSlowerButton = new JoystickButton(driveStick, 11);
	collectSlowerButton->WhenPressed(new collectSlower());
	collectFasterButton = new JoystickButton(driveStick, 12);
	collectFasterButton->WhenPressed(new collectFaster());
	angleDownButton = new JoystickButton(driveStick, 9);
	angleDownButton->WhenPressed(new angleDown());
	angleUpButton = new JoystickButton(driveStick, 10);
	angleUpButton->WhenPressed(new angleUp());
	shiftButton = new JoystickButton(driveStick, 8);
	shiftButton->WhenPressed(new shift());
	lauchBall = new JoystickButton(driveStick, 6);
	lauchBall->WhenPressed(new launch());
	mecanumDriveButton = new JoystickButton(driveStick, 4);
	mecanumDriveButton->WhenPressed(new drive());
	compressButton = new JoystickButton(driveStick, 2);
	compressButton->WhenPressed(new compress());
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
	SmartDashboard::PutData("compress", new compress());
	SmartDashboard::PutData("drive", new drive());
	SmartDashboard::PutData("driveArcarde", new driveArcarde());
	SmartDashboard::PutData("launch", new launch());
	SmartDashboard::PutData("collectFaster", new collectFaster());
	SmartDashboard::PutData("collectSlower", new collectSlower());
	SmartDashboard::PutData("shift", new shift());
	SmartDashboard::PutData("angleUp", new angleUp());
	SmartDashboard::PutData("angleDown", new angleDown());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
SmartJoystick* OI::getThrottle() {
	return throttle;
}
SmartJoystick* OI::getOperatorStick() {
	return operatorStick;
}
SmartJoystick* OI::getDriveStick() {
	return driveStick;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
