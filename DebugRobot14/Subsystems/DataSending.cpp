/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "DataSending.h"
#include "../Robotmap.h"
#include"../Commands/sendData.h"
DataSending::DataSending() : Subsystem("DataSending") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void DataSending::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new sendData());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	printf("You are now sending data\n");
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void DataSending::SendTheData(){
	Dashboard &dash = DriverStation::GetInstance()->GetHighPriorityDashboardPacker();
	//Dashboard &dash2 = DriverStation::GetInstance()->GetHighPriorityDashboardPacker();
			DriverStation *drive = DriverStation::GetInstance();
			stickStuff=new SmartJoystick(1);
			char buffer[1024];
			//char buff[100];
			static int count = 0;
			float battery = drive->GetBatteryVoltage();
			float x = stickStuff->GetAxis(Joystick::kXAxis);
			float y =stickStuff->GetAxis(Joystick::kYAxis);
			float z =stickStuff->GetAxis(Joystick::kZAxis);
			float batteryCurrent=RobotMap::chasisBatteryCurrent->GetVoltage();
			float idk=RobotMap::chasisPSITransducer120->GetVoltage();
			float pressureValue=RobotMap::launcherArmCompressor->GetPressureSwitchValue();
			float gyroAngle=RobotMap::driveTrainDriveGyro->GetAngle();
			
			float leftFrontVoltage=RobotMap::driveTrainFrontLeft->GetOutputVoltage();
			float leftFrontCurrent=RobotMap::driveTrainFrontLeft->GetOutputCurrent();
			float leftFrontPosition=RobotMap::driveTrainFrontLeft->GetPosition();
			
			float rightFrontVoltage=RobotMap::driveTrainFrontRight->GetOutputVoltage();
			float rightFrontCurrent=RobotMap::driveTrainFrontRight->GetOutputCurrent();
			float rightFrontPosition=RobotMap::driveTrainFrontRight->GetPosition();
			
			float leftRearVoltage=RobotMap::driveTrainRearLeft->GetOutputCurrent();
			float leftRearCurrent=RobotMap::driveTrainRearLeft->GetPosition();
			float leftRearPosition=RobotMap::driveTrainRearLeft->GetOutputCurrent();
			
			float rightRearVoltage=RobotMap::driveTrainRearRight->GetPosition();
			float rightRearCurrent=RobotMap::driveTrainRearRight->GetOutputCurrent();
			float rightRearPosition=RobotMap::driveTrainRearRight->GetPosition();
			
			float shifterSolenoid=RobotMap::shifterSystemshifterSolenoid->Get();
			int switchValue = RobotMap::shifterSystemShifterCompressor->GetPressureSwitchValue();
			//sprintf(buff, "lololol");
			sprintf(buffer, "%f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %f  %d  %d",
					battery, x,y,z, batteryCurrent,idk,pressureValue,leftFrontVoltage,
					leftFrontCurrent,leftFrontPosition,rightFrontVoltage,rightFrontCurrent,rightFrontPosition,
					leftRearVoltage,leftRearCurrent,leftRearPosition,rightRearVoltage,rightRearCurrent,
					rightRearPosition,shifterSolenoid,gyroAngle,switchValue,count++);
			//float test= 1.123456;
			//float test2=9.876654;
			//dash2.AddFloat(test);			
			dash.AddString(buffer);
			//dash.AddArray();
			dash.Finalize();
			char buf[100];
			char buf2[100];
			int setting = Robot::shifterSystem->GetGearSetting();
			int driveMode = Robot::driveTrain->GetDriveMode();
			if(driveMode==0)sprintf(buf2,"Drive Mode Error");
			if(driveMode==1)sprintf(buf2,"Drive Mode Arcade");
			if(driveMode==2)sprintf(buf2,"Drive Mode Meccanum");
			if(setting==-1)sprintf(buf,"shifted down");
			if(setting==0)sprintf(buf,"shifted off");
			if(setting==1)sprintf(buf,"shifted up");
			DriverStationLCD *lcd = DriverStationLCD::GetInstance();
			lcd->PrintfLine(DriverStationLCD::kUser_Line1, "%s",buf);
			lcd->PrintfLine(DriverStationLCD::kUser_Line2, "%s",buf2);
			lcd->UpdateLCD();
}
