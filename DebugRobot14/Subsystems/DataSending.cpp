/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "DataSending.h"
#include "../Robotmap.h"
#include"../Commands/sendData.h"
DataSending::DataSending() : Subsystem("DataSending") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	driverStick = new SmartJoystick(1);
	count=0;
}
void DataSending::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new sendData());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	//printf("You are now sending data\n");
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void DataSending::SendTheData(){
	strIndex = 0;
	Dashboard &dash = DriverStation::GetInstance()->GetHighPriorityDashboardPacker();
	DriverStation *drive = DriverStation::GetInstance();
	
	Send(count++);
	Send(drive->GetBatteryVoltage());
	Send(driverStick->GetAxis(Joystick::kXAxis));
	Send(driverStick->GetAxis(Joystick::kYAxis));
	Send(driverStick->GetAxis(Joystick::kZAxis));
	Send(RobotMap::chasisBatteryCurrent->GetVoltage());
	Send(RobotMap::launcherLauncherSolenoid->Get());
	bool pressureSwitch =(bool)RobotMap::compressionCompressor->GetPressureSwitchValue();
	Send(pressureSwitch);
	Send(RobotMap::driveTrainDriveGyro->GetAngle());
	Send(RobotMap::driveTrainFrontLeft->GetOutputVoltage());
	Send(RobotMap::driveTrainFrontLeft->GetOutputCurrent());
	Send(RobotMap::driveTrainFrontLeft->GetPosition());
	Send(RobotMap::driveTrainFrontRight->GetOutputVoltage());
	Send(RobotMap::driveTrainFrontRight->GetOutputCurrent());
	Send(RobotMap::driveTrainFrontRight->GetPosition());
	Send(RobotMap::driveTrainRearLeft->GetOutputCurrent());
	Send(RobotMap::driveTrainRearLeft->GetPosition());
	Send(RobotMap::driveTrainRearLeft->GetOutputCurrent());
	Send(RobotMap::driveTrainRearRight->GetPosition());
	Send(RobotMap::driveTrainRearRight->GetOutputCurrent());
	Send(RobotMap::driveTrainRearRight->GetPosition());
	Send(RobotMap::shifterSystemShifterSolenoid->Get());
	Send(RobotMap::collectorAngleAdjuster->GetAngle());
	bool highLimit=(bool)RobotMap::collectorHighLimit->Get();
	Send(highLimit);
	bool lowLimit=(bool)RobotMap::collectorLowLimit->Get();
	Send(lowLimit);
	Send(RobotMap::collectorElevationEncoder->GetVoltage());
	Send(RobotMap::collectorLeftCollect->Get());
	Send(RobotMap::collectorRightCollect->Get());
	dash.AddString(strBuffer);
	dash.Finalize();
			
	char line1[100];
	char line2[100];
	char line3[100];
	int setting = Robot::shifterSystem->GetGearSetting();
	int driveMode = Robot::driveTrain->GetDriveMode();
	if(driveMode==0)sprintf(line2,"Drive Mode Error");
	if(driveMode==1)sprintf(line2,"Drive Mode Arcade");
	if(driveMode==2)sprintf(line2,"Drive Mode Meccanum");
	if(setting==-1)sprintf(line1,"Shifted Down");
	if(setting==0)sprintf(line1,"Shifter Off");
	if(setting==1)sprintf(line1,"Shifted Up");
	if(pressureSwitch)sprintf(line3,"PSI is 0");
	if(!pressureSwitch)sprintf(line3,"PSI is 1");
	DriverStationLCD *lcd = DriverStationLCD::GetInstance();
	lcd->PrintfLine(DriverStationLCD::kUser_Line1, "%s",line1);
	lcd->PrintfLine(DriverStationLCD::kUser_Line2, "%s",line2);
	lcd->PrintfLine(DriverStationLCD::kUser_Line3, "%s",line3);
	lcd->UpdateLCD();
}
void DataSending::Send(double f, int digits)
{
	char buff[20];
	int len = sprintf(buff, "%.*f,", digits, f);
	if(strIndex+len < MaxBuffer){
		strcpy(strBuffer+strIndex, buff);
		strIndex += len;
	}
}
void DataSending::Send(bool b)
{
	int len = 2;
	if(strIndex+len < MaxBuffer){
		if(b)	strcpy(strBuffer+strIndex, "1,");
		else	strcpy(strBuffer+strIndex, "0,");
		strIndex += len;
	}
}
void DataSending::Send(int i)
{
	char buff[20];
	int len = sprintf(buff, "%d,", i);
	if(strIndex+len < MaxBuffer){
		strcpy(strBuffer+strIndex, buff);
		strIndex += len;
	}
}
void DataSending::Send(char *s)
{
	char buff[81];
	int len = sprintf(buff, "%s,", s);
	if(strIndex+len < MaxBuffer){
		strcpy(strBuffer+strIndex, buff);
		strIndex += len;
	}
}
