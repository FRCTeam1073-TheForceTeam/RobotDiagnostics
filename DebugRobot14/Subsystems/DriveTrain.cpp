/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "DriveTrain.h"
#include "../Robotmap.h"
#include "../Commands/drive.h"
#include "../Commands/driveArcarde.h"
const float TWIST_CONSTANT = 0.8f;
static const float MECANUM_CONSTANT = 1.4142;
int mode=0;
DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	rightBack = RobotMap::driveTrainRightBack;
	leftBack = RobotMap::driveTrainLeftBack;
	rightFront = RobotMap::driveTrainRightFront;
	leftFront = RobotMap::driveTrainLeftFront;
	robotDrive = RobotMap::driveTrainRobotDrive;
	gyro = RobotMap::driveTrainGyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
void DriveTrain::InitDefaultCommand() {
	leftFront->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	leftFront->ConfigEncoderCodesPerRev(360);
	leftFront->EnableControl();
	rightFront->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	rightFront->ConfigEncoderCodesPerRev(360);
	rightFront->EnableControl();
	rightBack->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	rightBack->ConfigEncoderCodesPerRev(360);
	rightBack->EnableControl();
	leftBack->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	leftBack->ConfigEncoderCodesPerRev(360);
	leftBack->EnableControl();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new drive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void DriveTrain::ArcadeDrive( Joystick *stick ) {
	robotDrive->ArcadeDrive( stick );
	mode=1;
}
void DriveTrain::MecanumDrive(float joystickX, float joystickY, float joystickTwist) {
	double angle = atan2(joystickX, joystickY);
		float joystickMagnitude = sqrt((joystickX * joystickX) + (joystickY * joystickY));
		if(joystickTwist < 0.20 && joystickTwist > -0.20){
				joystickTwist = 0.0;
			}
		float ccTwist = joystickTwist * TWIST_CONSTANT;
		float twist = -joystickTwist * TWIST_CONSTANT;
		
		float leftFrontVal = -1 * (ccTwist + joystickMagnitude*(cos(angle)+sin(angle)));
		float rightFrontVal = (twist + joystickMagnitude*(cos(angle)-sin(angle)));
		float leftBackVal= -1 * (ccTwist + joystickMagnitude*(cos(angle)-sin(angle)));
		float rightBackVal = (twist + joystickMagnitude*(cos(angle)+sin(angle)));
		
		leftFront->Set(leftFrontVal);
		rightFront->Set(rightFrontVal);
		leftBack->Set(leftBackVal);
		rightBack->Set(rightBackVal);
		mode=2;
}
string DriveTrain::GetDriveMode(){
	if(mode==0)return "Error";
	if(mode==1)return "Arcade";
	if(mode==2)return "Mecanum";
	return 0;
}
