/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "DriveTrain.h"
#include "../Robotmap.h"
#include "../Commands/drive.h"
#include "../Commands/sendDriveData.h"
const float TWIST_CONSTANT = 2;
static const float MECANUM_CONSTANT = 1.4142;
int mode=0;
DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	frontLeft = RobotMap::driveTrainFrontLeft;
	frontRight = RobotMap::driveTrainFrontRight;
	rearLeft = RobotMap::driveTrainRearLeft;
	rearRight = RobotMap::driveTrainRearRight;
	robotDrive = RobotMap::driveTrainRobotDrive;
	driveGyro = RobotMap::driveTrainDriveGyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void DriveTrain::InitDefaultCommand() {
	frontLeft->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	frontLeft->ConfigEncoderCodesPerRev(360);
	frontLeft->EnableControl();
	frontRight->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	frontRight->ConfigEncoderCodesPerRev(360);
	frontRight->EnableControl();
	rearRight->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	rearRight->ConfigEncoderCodesPerRev(360);
	rearRight->EnableControl();
	rearLeft->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	rearLeft->ConfigEncoderCodesPerRev(360);
	rearLeft->EnableControl();
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	//SetDefaultCommand(new drive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new drive);
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveTrain::ArcadeDrive( Joystick *stick ) {
	robotDrive->ArcadeDrive( stick );
	mode=1;
}
void DriveTrain::MecanumDrive(float joystickX, float joystickY, float joystickTwist) {
        //TODO Needs adjustment to scaling and possibly other things
	double angle = atan2(joystickX, joystickY);
		float joystickMagnitude = sqrt((joystickX * joystickX) + (joystickY * joystickY));
		float ccTwist = joystickTwist * TWIST_CONSTANT;
		float twist = -joystickTwist * TWIST_CONSTANT;
		
		float leftFrontVal = -1 * (ccTwist + joystickMagnitude*(cos(angle)+sin(angle)));
		float rightFrontVal = (twist + joystickMagnitude*(cos(angle)-sin(angle)));
		float leftBackVal= -1 * (ccTwist + joystickMagnitude*(cos(angle)-sin(angle)));
		float rightBackVal = (twist + joystickMagnitude*(cos(angle)+sin(angle)));
		
		frontLeft->Set(leftFrontVal);
		frontRight->Set(rightFrontVal);
		rearLeft->Set(leftBackVal);
		rearRight->Set(rightBackVal);
		mode=2;
}
float DriveTrain::ReadAndReportAngle() {
	
	float angg = driveGyro->GetAngle();
	return (angg +0.002);
	SmartDashboard::PutNumber( "Gyro Angle", (double)angg );
	//printf ("gyro is %f\n", angg);
}
 void DriveTrain::ReportEncoders() {
	//frontLeft->GetControlMode();
	float encoder1 = frontLeft->GetPosition();
	float encoder2 = frontLeft->GetPosition();
	float voltage1 = frontRight->GetOutputVoltage();
	float voltage2 = frontRight->GetOutputVoltage();
	//printf ("drive encoder %f\n", encoder1);
	SmartDashboard::PutNumber( "Drive Encoder 1", (double)encoder1 );
	SmartDashboard::PutNumber( "Drive Encoder 2", (double)encoder2 );
	SmartDashboard::PutNumber( "Left DRIVE Voltage", (double)voltage1 );
	SmartDashboard::PutNumber( "Right DRIVE Voltage", (double)voltage2 );
}
int DriveTrain::GetDriveMode(){
	if(mode==0)return 0;
	if(mode==1)return 1;
	if(mode==2)return 2;
	return 0;
}
