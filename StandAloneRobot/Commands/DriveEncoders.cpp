// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveEncoders.h"
DriveEncoders::DriveEncoders() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void DriveEncoders::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
void DriveEncoders::Execute() {
	Dashboard &dash = DriverStation::GetInstance()->GetHighPriorityDashboardPacker();
	DriverStation *drive = DriverStation::GetInstance();
	char buffer[1000];
	static int count = 0;
	float battery = drive->GetBatteryVoltage();
	float x =(float) drive->GetStickAxis(1,x);
	float y = (float) drive->GetStickAxis(1,y);
	float angle = Robot::angleCheckWithGyro->readAndReportAngle();
	float collectorSpeed = Robot::collector->GetSpeed();
	float leftPosition = RobotMap::driveTrainLeftDrive->GetPosition();
	float rightPosition = RobotMap::driveTrainRightDrive->GetPosition();
	float leftVoltage = RobotMap::driveTrainLeftDrive->GetOutputVoltage();
	float rightVoltage = RobotMap::driveTrainRightDrive->GetOutputVoltage();
	float leftCurrent = RobotMap::driveTrainLeftDrive->GetOutputCurrent();
	float rightCurrent = RobotMap::driveTrainRightDrive->GetOutputCurrent();
	sprintf(buffer, "%d %f ", count++, battery);
	dash.AddString(buffer);
	dash.Finalize();
	//printf ("Wut Up\n");
	
}
// Make this return true when this Command no longer needs to run execute()
bool DriveEncoders::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void DriveEncoders::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveEncoders::Interrupted() {
}
