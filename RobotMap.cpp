// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
CANJaguar* RobotMap::driveTrainLeftDrive = NULL;
CANJaguar* RobotMap::driveTrainRightDrive = NULL;
CANJaguar* RobotMap::driveTrainRight0Drive = NULL;
CANJaguar* RobotMap::driveTrainLeft0Drive = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive = NULL;
DigitalInput* RobotMap::collectorPacManIR = NULL;
SpeedController* RobotMap::collectorPacManFeeder = NULL;
CANJaguar* RobotMap::shootermainShooter = NULL;
CANJaguar* RobotMap::shooterTurret = NULL;
DigitalInput* RobotMap::shooteroneBitIREncoder = NULL;
AnalogChannel* RobotMap::shooterAngleEncoder = NULL;
SpeedController* RobotMap::shooterAngleVictor = NULL;
Gyro* RobotMap::angleCheckWithGyroGyro1 = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	driveTrainLeftDrive = new CANJaguar(1);
	
	
	driveTrainRightDrive = new CANJaguar(2);
	
	driveTrainRight0Drive = new CANJaguar(3);
	
	driveTrainLeft0Drive = new CANJaguar(4);
	
	driveTrainRobotDrive = new RobotDrive(driveTrainLeftDrive, driveTrainRightDrive, driveTrainRight0Drive, driveTrainLeft0Drive);
	
	driveTrainRobotDrive->SetSafetyEnabled(false);
        driveTrainRobotDrive->SetExpiration(0.1);
        driveTrainRobotDrive->SetSensitivity(0.5);
        driveTrainRobotDrive->SetMaxOutput(1.0);
        
	collectorPacManIR = new DigitalInput(1, 4);
	lw->AddSensor("Collector", "PacManIR", collectorPacManIR);
	
	collectorPacManFeeder = new Victor(1, 3);
	lw->AddActuator("Collector", "PacManFeeder", (Victor*) collectorPacManFeeder);
	
	shootermainShooter = new CANJaguar(7);
	
	shooterTurret = new CANJaguar(5);
	
	shooteroneBitIREncoder = new DigitalInput(1, 6);
	lw->AddSensor("Shooter", "oneBitIREncoder", shooteroneBitIREncoder);
	
	shooterAngleEncoder = new AnalogChannel(1, 2);
	lw->AddSensor("Shooter", "AngleEncoder", shooterAngleEncoder);
	
	shooterAngleVictor = new Victor(1, 4);
	lw->AddActuator("Shooter", "AngleVictor", (Victor*) shooterAngleVictor);
	
	angleCheckWithGyroGyro1 = new Gyro(1, 1);
	lw->AddSensor("AngleCheckWithGyro", "Gyro 1", angleCheckWithGyroGyro1);
	//angleCheckWithGyroGyro1->SetSensitivity(0.007);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	angleCheckWithGyroGyro1->Reset();
}
